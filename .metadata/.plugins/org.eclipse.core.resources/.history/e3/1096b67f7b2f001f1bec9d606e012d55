package teste_programacao;


import java.math.BigDecimal;
import java.time.LocalDate;
//import java.time.Month;
import java.time.format.DateTimeFormatter;
import java.util.*;
import java.util.stream.Collectors;
import java.util.Map;

public class Principal  {
	
public static void main(String[] args) {

		
	
	
	
	List<Funcionarios> funcionario = new ArrayList<>();
	insertEmployee (funcionario);
	
	removeEmployee(funcionario,"João");
		
		
		
	increaseSalary(funcionario);
	printEmployee(funcionario);
	Map<String, List<Funcionarios>> funcionarioPorFuncao = mostrarFuncionarioPorFuncao(funcionario);
	
	
	
	
	
	
	
	
	
	
	
	
	
	/*
	printEmployeeByFunction(funcionarioPorfuncao);
	
	printBirthdays(funcionario, Month.OCTOBER, Month.DECEMBER);
	
	printEmployeeOldestAge();
	
	printEmployeesOrder();
	
	printTotalSalaries();
	
	printMinimum salaries();
	*/
		
}

	private static void insertEmployee(List<Funcionarios> funcionario) {
		
		funcionario.add(new Funcionarios("Maria", LocalDate.of(2000, 10, 18), new BigDecimal("2009.44"), "Operador"));
		funcionario.add(new Funcionarios("João", LocalDate.of(1990, 5, 12), new BigDecimal("2284.38"), "Operador"));
		funcionario.add(new Funcionarios("Caio", LocalDate.of(1961, 5, 2), new BigDecimal("9836.14"), "Coordenador"));
		funcionario.add(new Funcionarios("Miguel", LocalDate.of(1988, 10, 14), new BigDecimal("1919.88"), "Diretor"));
		funcionario.add(new Funcionarios("Alice", LocalDate.of(1995, 1, 5), new BigDecimal("2234.68"), "Recepcionista"));
		funcionario.add(new Funcionarios("Heitor", LocalDate.of(1999, 11, 19), new BigDecimal("1582.72"), "Operador"));
		funcionario.add(new Funcionarios("Arthur", LocalDate.of(1993, 3, 31), new BigDecimal("4071.84"), "Contador"));
		funcionario.add(new Funcionarios("Laura", LocalDate.of(1994, 7, 8), new BigDecimal("3017.45"), "Gerente"));
		funcionario.add(new Funcionarios("Heloisa", LocalDate.of(2003, 5, 24), new BigDecimal("1606.85"), "Eletricista"));
		funcionario.add(new Funcionarios("Helena", LocalDate.of(1996, 9, 2), new BigDecimal("2799.93"), "Gerente"));	
		
	}
	
	private static void removeEmployee(List<Funcionarios> funcionario, String nome) {
		funcionario.removeIf(funcionarios -> funcionarios.getNome().equals(nome));
	}
	
	
	
	private static void printEmployee(List<Funcionarios> funcionarios) {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
        for (Funcionarios funcionario : funcionarios) {
            System.out.printf("Nome: %s, Data de Nascimento: %s, Salário: %,.2f, Função: %s%n",
                    funcionario.getNome(),
                    funcionario.getDataNascimento().format(formatter),
                    funcionario.getSalario(),
                    funcionario.getFuncao());
        }
	}
	
	
	private static void increaseSalary(List<Funcionarios> funcionarios) {
		
		for (Funcionarios funcionario : funcionarios) {
			BigDecimal novoSalario = funcionario.getSalario().multiply(new BigDecimal("1.1"));
			funcionario.setSalario(novoSalario);
		}
		
		
	}
	
	
	private static Map<String, List<Funcionarios>> mostrarFuncionarioPorFuncao(List<Funcionarios> funcionario) {
        return funcionario.stream().collect(Collectors.groupingBy(Funcionarios::getFuncao));
    }
	
	
	
	
}
